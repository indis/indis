#!/usr/bin/env ruby
##############################################################################
#   Indis framework                                                          #
#   Copyright (C) 2012 Vladimir "Farcaller" Pouzanov <farcaller@gmail.com>   #
#                                                                            #
#   This program is free software: you can redistribute it and/or modify     #
#   it under the terms of the GNU General Public License as published by     #
#   the Free Software Foundation, either version 3 of the License, or        #
#   (at your option) any later version.                                      #
#                                                                            #
#   This program is distributed in the hope that it will be useful,          #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
#   GNU General Public License for more details.                             #
#                                                                            #
#   You should have received a copy of the GNU General Public License        #
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
##############################################################################

require 'main'
require 'terminal-table'
require 'indis'

VERSION = "0.2.2"

def pad(*args)
  i = args.first
  if args.length == 1
    sprintf('%8d', i)
  else
    sprintf('%08X', i)
  end
end

def list_segments(target)
  segcommands = target.format.commands.map{ |c| c if c.is_a?(Indis::MachO::SegmentCommand) }.compact
  idx = 1
  
  ss = []

  segcommands.each do |cmd|
    s = {}
    s[:name] = if cmd.segname.length > 0
      cmd.segname
    else
      '*NONAME*'
    end
    
    s[:addr] = cmd.vmaddr
    s[:size] = cmd.vmsize
    s[:fileoff] = cmd.fileoff
    s[:filesize] = cmd.filesize
    ss << s
  end
  ss
end

def list_sections(segmentcmd)
  ss = []

  segmentcmd.sections.each do |sect|
    s = {}
    s[:segname] = segmentcmd.segname
    s[:name] = sect.sectname
    s[:addr] = sect.addr
    s[:size] = sect.size
    s[:offset] = sect.offset
    s[:type] = sect.type
    s[:attributes] = sect.attributes
    ss << s
  end
  ss
end

def list_all_sections(target)
  ss = []

  segcommands = target.format.commands.map{ |c| c if c.is_a?(Indis::MachO::SegmentCommand) }.compact
  segcommands.each do |cmd|
    ss << list_sections(cmd)
  end
  ss.flatten
end

def format_numbers(arr, fmt)
  arr.map { |e| e.is_a?(Fixnum) ? e.to_s(fmt) : e }
end

Main {
  synopsis "indis-seg (segments|sections) <filename> [options]"
  author "Vladimir \"Farcaller\" Pouzanov"
  version VERSION
  
  argument('filename') {
    required
    cast :string
    validate { |fn| FileTest.file?(fn) }
    synopsis "<filename> Mach-O binary file"
  }
  
  option('number-format', '-n') {
    argument_required
    cast :integer
    defaults 16
    synopsis "--number-format|-n numbers base (defauts to 16)"
  }
  
  mode 'segments' do
    def run
      target = Indis::Target.new(params['filename'].value).load
      head = %w(Name Address Size File\ Offset File\ Size)
      rows = list_segments(target).map do |s|
        format_numbers([s[:name], s[:addr], s[:size], s[:fileoff], s[:filesize]], params['number-format'].value)
      end
      table = Terminal::Table.new(rows: rows, headings: head)
      (1..4).each { |i| table.align_column(i, :right) }
      
      puts table
    end
  end
  
  mode 'sections' do
    def run
      target = Indis::Target.new(params['filename'].value).load
      head = %w(Segment\ Name Name Address Size File\ Offset Type)
      rows = list_all_sections(target).map do |s|
        format_numbers([s[:segname], s[:name], s[:addr], s[:size], s[:offset], s[:type]], params['number-format'].value)
      end
      table = Terminal::Table.new(rows: rows, headings: head)
      (2..4).each { |i| table.align_column(i, :right) }
      
      puts table
    end
  end
  
  def run
    puts "Specify either sections or segments"
    exit_failure
  end
}
