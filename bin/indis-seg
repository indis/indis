#!/usr/bin/env ruby
##############################################################################
#   Indis framework                                                          #
#   Copyright (C) 2012 Vladimir "Farcaller" Pouzanov <farcaller@gmail.com>   #
#                                                                            #
#   This program is free software: you can redistribute it and/or modify     #
#   it under the terms of the GNU General Public License as published by     #
#   the Free Software Foundation, either version 3 of the License, or        #
#   (at your option) any later version.                                      #
#                                                                            #
#   This program is distributed in the hope that it will be useful,          #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
#   GNU General Public License for more details.                             #
#                                                                            #
#   You should have received a copy of the GNU General Public License        #
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
##############################################################################

require 'stringio'
require 'indis'

def pad(*args)
  i = args.first
  if args.length == 1
    sprintf('%8d', i)
  else
    sprintf('%08X', i)
  end
end

target = Indis::Target.new(ARGV[0])

mach = target.format

segcommands = mach.commands.map{ |c| c if c.is_a?(Indis::MachO::SegmentCommand) }.compact

idx = 1

puts "#{sprintf('%16s', 'segname')}  #{sprintf('%16s', 'sectname')}    vmaddr    vmsize   fileoff  filesize  type"
segcommands.each do |cmd|
  name = if cmd.segname.length > 0
    cmd.segname
  else
    '*NONAME*'
  end
  
  puts "#{sprintf('%16s',name)}  #{' '*16}  #{pad cmd.vmaddr, true}  #{pad cmd.vmsize}  #{pad cmd.fileoff, true}  #{pad cmd.filesize}"

  cmd.sections.each do |sec|
    puts "#{' '*16}  #{sprintf('%16s',sec.sectname)}  #{pad sec.addr, true}  #{pad sec.size}  #{pad sec.offset, true}  " +
         "          #{sec.type} #{sec.attributes.length > 0 ? sec.attributes : ''}"
    idx += 1
  end
end