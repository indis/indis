#!/usr/bin/env ruby
##############################################################################
#   Indis framework                                                          #
#   Copyright (C) 2012 Vladimir "Farcaller" Pouzanov <farcaller@gmail.com>   #
#                                                                            #
#   This program is free software: you can redistribute it and/or modify     #
#   it under the terms of the GNU General Public License as published by     #
#   the Free Software Foundation, either version 3 of the License, or        #
#   (at your option) any later version.                                      #
#                                                                            #
#   This program is distributed in the hope that it will be useful,          #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
#   GNU General Public License for more details.                             #
#                                                                            #
#   You should have received a copy of the GNU General Public License        #
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
##############################################################################

require 'main'
require 'indis'

VERSION = "0.2.0"

Main {
  synopsis "indis-dis <filename> <symbol> [--without-analyzers]"
  author "Vladimir \"Farcaller\" Pouzanov"
  version VERSION
  
  argument('filename') {
    required
    cast :string
    validate { |fn| FileTest.file?(fn) }
    synopsis "<filename> Mach-O binary file"
  }
  
  argument('symbol') {
    required
    cast :string
    synopsis "<symbol> symbol name to analyze"
  }
  
  option('without-analyzers') {
    optional
    default false
    synopsis "--without-analyzers skip attaching analyzers"
  }
  
  def run
    target = Indis::Target.new(params['filename'].value).load
    sym = target.symbols.find { |sym| sym.name == params['symbol'].value }
    unless sym
      puts "Symbol #{params['symbol'].value} not found"
      exit_failure
    end
    
    # build collision symbols for same section
    later_syms = []
    target.symbols.each { |s| later_syms << s if s.section == sym.section && s.vmaddr > sym.vmaddr }

    following_sym_addr = later_syms.map { |s| s.vmaddr }.min

    # set up code analyzers
    unless params['without-analyzers'].value
      Indis::ARM::Analyzer::BLAnalyzer.new(target)
      Indis::ARM::Analyzer::LDRLitAnalyzer.new(target)
    end

    # parse all the section for symbol as code
    code_parser = Indis::ARM::CodeParser.new(target)
    code_parser.reparse_section(sym.section)

    # build a section map
    sectmap = target.vmmap[sym.section.to_vmrange]

    # preserve the address for zero index
    ofs = sym.vmaddr - sym.section.vmaddr
    
    # print out
    base = sym.vmaddr
    (ofs..sym.section.vmsize).each do |ia|
      break if following_sym_addr && base >= following_sym_addr

      b = sectmap[ia]

      next unless b

      if b.is_a?(Fixnum)
        base += 1
        puts "#{sprintf("%08x", base)}         \tDCB\t#{b.to_s(16)}"
      else
        base += b.size
        puts "#{sprintf("%08x", b.vmaddr)} #{sprintf("%08x", target.vmmap.bytes_at(base-b.size, b.size).pack('C*').unpack('V')[0])}\t" +
             "#{b.to_s}\t#{b.tags.length > 0 ? '; ' : ''}#{b.tags.map { |k, v| "#{k}: #{v}" }.join(', ')}"
      end  
    end
  end
}
